var user = require('./lib/user'),
	frog = require('./lib/frog'),
	bumpers = [],
	players = {};

exports.config_player = function(pool,socket) {

	socket.on('login', function(input) {
		user.login(players,pool,socket,input.email,input.password,function(id) {
			frog.getFrog(pool,players,id,1,function(frog){
				players[id] = {socket: socket, frog: frog};	
			});
			console.log("Player " + id + " has Frog " + players[id]);
		});
	});
	
	socket.on('register', function(input) {
		user.register(pool,socket,input.email,input.password,function(id) {
			frog.getFrog(pool,players,id,1,function(frog){
				players[id] = {socket: socket, frog: frog};
			});
			console.log("Player " + id + " has Frog " + players[id]);
		});
	});
	
	socket.on('get_frog', function(id) {
		console.log("getting frog for player " + id );
		frog.pullFrog(pool,players[id].frog,function(frog) {
			if(frog) {
				console.log("returning frog");
				socket.emit('ret_frog', frog);
			}
			else {
				console.log("null frog");
				socket.emit('dberror');
			}
		});
	});
	
	socket.on('bump', function(id) {
		bumpers.push(id);
		if( !checkBump(pool,id) ) {
			setTimeout(function(){falseBumper(id)},1000);
		}
	});
	
	socket.on('playerleave', function(socket) {
		for( var id in players ) {
			if(players.hasOwnProperty(id)) {
				var soc = players[id].socket;
				if( soc == socket ) {
					delete players[id];
				}
			}
		}
	});
	
	socket.on('disconnect', function(socket) {
		for( var id in players ) {
			if(players.hasOwnProperty(id)) {
				var soc = players[id].socket;
				if( soc == socket ) {
					delete players[id];
				}
			}
		}
	});
}


function checkBump(pool,callID) {
	var length = bumpers.length;
	var success = false;
	for( var i = 0; i < length; i ++ ) {
		var checkID = bumpers[i];
		if(checkID != callID && players[checkID].frog == players[callID].frog) {
			frog.pullInfo(pool,players[callID].frog,function(info){
				if(frog) {
					players[checkID].socket.emit('bump_success',info);
					players[callID].socket.emit('bump_success',info);
				}
				else {
					players[checkID].socket.emit('dberror');
					players[callID].socket.emit('dberror');
				}
			});
			frog.getFrog(pool,players,callID,2,function(newFrogs){
				players[checkID].frog = newFrogs[0];
				players[callID].frog = newFrogs[1];
			});
			bumpers.splice(i,1);
			var callIndex = bumpers.indexOf(callID);
			bumpers.splice(callIndex,1);
			success = true;
			break;
		}
	}
	return success;
}
function falseBumper(lostID) {
	var lostIndex = bumpers.indexOf(lostID);
	if( lostIndex != -1 ) {
		players[lostID].socket.emit('bump_fail');
		bumpers.splice(lostID,1);
	}
}