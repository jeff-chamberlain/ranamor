Validator = require('validator').Validator;

exports.login = function(players,pool,socket,email,callback) {
	var validator = new Validator();
	validator.check(email, "Please enter a valid email").notNull().isEmail();
	var errors = validator.getErrors();
	if( errors.length > 0 ) {
		console.log(errors);
		socket.emit('login_fail',errors);
	}
	else {
		pool.getConnection(function(err, connection) {
			if(err) {
				console.log(err);
				socket.emit('dberror');
			}
			else {
				connection.query( 'SELECT pID FROM Player WHERE email=?',[email], function(err,result) {
					if(err) {
						console.log(err);
					}
					if( result.length == 0 ) {
						var error = ['Email is not registered'];
						socket.emit('login_fail',error);
					}
					else {
						var id = result[0].pID;
						if( players.hasOwnProperty(id) ) {
							var error = ['Player already logged in'];
							socket.emit('login_fail',error);
						}
						else {
							socket.emit('login_success',id);
							callback(id);
						}
					}
				});
			}
			connection.release();
		});
	}
}

exports.register = function(pool,socket,email,callback) {
	var validator = new Validator();
	validator.check(email, "Please enter a valid email").notNull().isEmail();
	var errors = validator.getErrors();
	if( errors.length > 0 ) {
		console.log(errors);
		socket.emit('register_fail',errors);
	}
	else {
		pool.getConnection(function(err, connection) {
			if(err) {
				console.log(err);
				socket.emit('dberror');
			}
			else {
				connection.query( 'SELECT pID FROM Player WHERE email=?',[email], function(err,result) {
					if( result.length > 0 ) {
						var error = ['Email already exists!'];
						socket.emit('register_fail',error);
					}
					else {
						var post = {email: email, gameID: 1 };
						connection.query( 'INSERT INTO Player SET ?',post, function(err) {
							if(err) {
								console.log(err);
							}
						});
						connection.query( 'SELECT pID FROM Player WHERE email=?',[email], function(err,result) {
							if(err) {
								console.log(err);
							}
							var id = result[0].pID;
							socket.emit('login_success',id);
							callback(id);
						});
					}
				});
				connection.release();
			}
		});
	}
}

Validator.prototype.error = function (msg) {
    this._errors.push(msg);
    return this;
}

Validator.prototype.getErrors = function () {
    return this._errors;
}