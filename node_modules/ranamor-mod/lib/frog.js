exports.getFrog = function(pool,players,id,num,callback) {
	getAllFrogs(pool,function(frogs){
		if(frogs) {
			for( var pID in players ) {
				if( players.hasOwnProperty(pID) ) {
					if( pID == id ) {
						var playerFrog = players[id].frog;
						if(playerFrog) {
							console.log( "Deleting Frog " + playerFrog );
							delete frogs[playerFrog];
						}
					}
					else {
						var playerFrog = players[pID].frog;
						frogs[playerFrog] ++;
						console.log( "Frog " + playerFrog + "has a count of " + frogs[playerFrog]);
					}
				}
			}
			var fitFrogs = findFitFrogs(frogs);
			if( num == 1 ) {
				var rand = Math.floor( Math.random() * fitFrogs.length );
				callback(fitFrogs[rand]);
			}
			else {
				if( fitFrogs.length > 1 ) {
					var rand = Math.floor( Math.random() * fitFrogs.length );
					var firstFrog = fitFrogs[rand];	
					fitFrogs.splice(rand,1);
					rand = Math.floor( Math.random() * fitFrogs.length );
					var secondFrog = fitFrogs[rand];
					callback([firstFrog,secondFrog]);
				}
				else {
					var firstFrog = fitFrogs[0];
					delete frogs[firstFrog];
					fitFrogs = findFitFrogs(frogs);
					var rand = Math.floor( Math.random() * fitFrogs.length );
					var secondFrog = fitFrogs[rand];
					callback([firstFrog,secondFrog]);
				}
			}
		}
		else {
			console.log('Returned null frogs from db');
		}
	});
}

exports.pullFrog = function(pool,id,callback) {
	pool.getConnection(function(err, connection) {
		if(err) {
			console.log(err);
			callback(null);
		}
		else {
			connection.query('SELECT Frog.fID, fColor, FAudio.fAudioLength, FAudio.fAudioOgg, FAudio.fAudioMp3, FAudio.fAudioWav FROM Frog LEFT JOIN FAudio ON Frog.fID=FAudio.fID WHERE Frog.fID=?',[id],function(err,result) {
				if(err) {
					console.log(err);
				}
				connection.release();
				var frog = result[0];
				callback(frog);
			});
		}
	});
}

exports.pullInfo = function(pool,id,callback) {
	pool.getConnection(function(err, connection) {
		if(err) {
			console.log(err);
			callback(null);
		}
		else {
			connection.query('SELECT Frog.fID, commonName, scientificName, geographicInfo, conservationInfo, FImg.fImg FROM Frog INNER JOIN FImg ON FImg.fID = Frog.fID WHERE Frog.fID = ?',[id],function(err,result) {
				if(err) {
					console.log(err);
				}
				connection.release();
				var frog = result[0];
				callback(frog);
			});
		}
	});
}

function getAllFrogs(pool,callback) {
	pool.getConnection(function(err, connection) {
		if(err) {
			console.log(err);
		}
		else {
			connection.query('SELECT fID FROM Frog', function(err,result) {
				if(err) {
					console.log(err);
				}
				console.log(result);
				var frogs = {};
				for(i=0;i<result.length;i++) {
					frogs[result[i].fID] = 0;
				}
				connection.release();
				callback(frogs);
			});
		}
	});
}
function findFitFrogs(frogs) {
	var unp = findUnpaired(frogs);
	if(unp) {
		return unp;
	}
	else {
		var emp = findEmpty(frogs);
		if(emp) {
			return emp;
		}
		else {
			return findLowestRemaining(frogs);
		}
	}
}
function findUnpaired(frogs) {
	var unpaired = [];
	for( var id in frogs ) {
		if( frogs.hasOwnProperty(id) && frogs[id] == 1 ) {
			unpaired.push(id);
		}
	}
	if( unpaired.length > 0 ) {
		return unpaired;
	}
	else {
		return null;
	}
}
function findEmpty(frogs) {
	var empty = [];
	for( var id in frogs ) {
		if( frogs.hasOwnProperty(id) && frogs[id] == 0 ) {
			empty.push(id);
		}
	}
	if( empty.length > 0 ) {
		return empty;
	}
	else {
		return null;
	}
}
function findLowestRemaining(frogs) {
	var lowestÂ = 100;
	var remaining = [];
	for( var id in frogs ) {
		if( frogs.hasOwnProperty(id) && frogs[id] < lowest ) {
			lowest = frogs[id];
		}
	}
	for( var id in frogs ) {
		if( frogs.hasOwnProperty(id) && frogs[id] == lowest ) {
			remaining.push(id);
		}
	}
	return remaining;
}